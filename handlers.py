import asyncio
import sqlite3
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

import json
import kb
import price
import re
import os

load_dotenv()

router = Router()

admins = list(map(int, os.getenv("ADMINS", "").split(","))) # –°–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
requisite_path = "requisite.json" # –§–∞–π–ª —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–º
active_deals = {} # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
cancel_text = '‚ùå –û—Ç–º–µ–Ω–∞' # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏

class CryptoBuy(StatesGroup): # –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_amount_btc = State()
    waiting_for_amount_usdt = State()
    waiting_for_amount_ltc = State()

    wallet = State()
    payment_method = State()
    waiting_for_code = State()
    waiting_for_screenshot = State()
    waiting_for_payment = State()

    waiting_for_requisite = State()
    waiting_for_new_promocode = State()
    waiting_for_discount = State()
    waiting_for_num_of_activations = State()

# –§—É–Ω—Ü–∫–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_user(message):
    con = sqlite3.connect("database.db")
    cur = con.cursor()
    cur.execute('SELECT * FROM users WHERE id = ?', (message.from_user.id,))
    user = cur.fetchone()
    if user:
        pass
    else:
        cur.execute('INSERT INTO users(username, id) VALUES(?, ?)',('@' + message.from_user.username or 'NULL', message.from_user.id))
        con.commit()
        cur.close()
        con.close()

def save_promocode(promocode, num_of_activations, discount):
    con = sqlite3.connect("database.db")
    cur = con.cursor()
    cur.execute('INSERT OR IGNORE INTO promocodes(promocode, num_of_activations, discount) VALUES(?, ?, ?)',(promocode, num_of_activations, discount))
    con.commit()
    cur.close()
    con.close()

def check_promocode(promocode):
    con = sqlite3.connect("database.db")
    cur = con.cursor()
    cur.execute('SELECT * FROM promocodes WHERE promocode = ?', (promocode,))
    code = cur.fetchone()
    if code:
        cur.execute("UPDATE promocodes SET num_of_activations = num_of_activations - 1 WHERE promocode = ? AND num_of_activations > 0", (code[0],))
        if cur.rowcount == 0:
            cur.close()
            con.close()
            return False, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."
        else:
            cur.execute('SELECT * FROM promocodes WHERE promocode = ?', (promocode,))
            con.commit()
            cur.close()
            con.close()
            return True, "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω.", code[2]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
def get_requisite():
    if not os.path.exists(requisite_path):
        return None
    with open(requisite_path, "r", encoding="utf-8") as f:
        data = json.load(f)
        requisite = data.get("payment_method")
        if not requisite:
            return None
        else:
            return ' '.join(requisite[i:i+4] for i in range(0, len(requisite), 4))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.chat.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=kb.start_kb)
        save_user(message)
    else:
        pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç ---
@router.message(F.text == '–ö—É–ø–∏—Ç—å BTC')
async def buy_btc(message: Message, state: FSMContext):
    if await state.get_state() != CryptoBuy.waiting_for_payment:
        await message.answer(f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å BTC: {price.get_price_btc():.2f}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n–ü—Ä–∏–º–µ—Ä: 5000",reply_markup=kb.cancel_kb)
        await state.set_state(CryptoBuy.waiting_for_amount_btc)
    else:
        await message.answer('‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞! ‚ö†Ô∏è\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë.')

@router.message(F.text == '–ö—É–ø–∏—Ç—å USDT')
async def buy_usdt(message: Message, state: FSMContext):
    if await state.get_state() != CryptoBuy.waiting_for_payment:
        await message.answer(f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å USDT: {price.get_price_usdt():.1f}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n–ü—Ä–∏–º–µ—Ä: 5000",reply_markup=kb.cancel_kb)
        await state.set_state(CryptoBuy.waiting_for_amount_usdt)
    else:
        await message.answer('‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞! ‚ö†Ô∏è\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë.')

@router.message(F.text == '–ö—É–ø–∏—Ç—å LTC')
async def buy_ltc(message: Message, state: FSMContext):
    if await state.get_state() != CryptoBuy.waiting_for_payment:
        await message.answer(f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å LTC: {price.get_price_ltc():.2f}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n–ü—Ä–∏–º–µ—Ä: 5000", reply_markup=kb.cancel_kb)
        await state.set_state(CryptoBuy.waiting_for_amount_ltc)
    else:
        await message.answer('‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞! ‚ö†Ô∏è\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë.')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã ---
@router.message(CryptoBuy.waiting_for_amount_btc, F.text.regexp(r"^\d+([.,]\d{1,2})?$"))
async def process_amount(message: Message, state: FSMContext):
    message_text = message.text.replace(",", ".")
    cost = float(message_text)
    if float(cost) < 1000:
        await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 1000 —Ä—É–±–ª–µ–π!')
    else:
        cost = float(message.text)
        amount = float(cost) / float(price.get_price_btc())
        await message.answer(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n\n{cost}‚ÇΩ + –∫–æ–º–∏—Å—Å–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã)\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {amount} BTC\n\n‚ùó–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.üëá", reply_markup=kb.user_agreement)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ BTC –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=kb.cancel_kb)
        await state.update_data(amount=amount, cost=cost, currency="BTC")
        await state.set_state(CryptoBuy.wallet)

@router.message(CryptoBuy.waiting_for_amount_usdt, F.text.regexp(r"^\d+([.,]\d{1,2})?$"))
async def process_amount(message: Message, state: FSMContext):
    message_text = message.text.replace(",", ".")
    cost = float(message_text)
    if float(cost) < 1000:
        await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 1000 —Ä—É–±–ª–µ–π!')
    else:
        cost = float(message.text)
        amount = float(cost) / float(price.get_price_usdt())
        await message.answer(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n\n{cost}‚ÇΩ + –∫–æ–º–∏—Å—Å–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã)\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {amount} USDT\n\nÔ∏è‚ùó–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.üëá", reply_markup=kb.user_agreement)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ USDT –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=kb.cancel_kb)
        await state.update_data(amount=amount, cost=cost, currency="USDT")
        await state.set_state(CryptoBuy.wallet)

@router.message(CryptoBuy.waiting_for_amount_ltc, F.text.regexp(r"^\d+([.,]\d{1,2})?$"))
async def process_amount(message: Message, state: FSMContext):
    message_text = message.text.replace(",", ".")
    cost = float(message_text)
    if float(cost) < 1000:
        await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 1000 —Ä—É–±–ª–µ–π!')
    else:
        cost = float(message.text)
        amount = float(cost) / float(price.get_price_ltc())
        await message.answer(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n\n{cost}‚ÇΩ + –∫–æ–º–∏—Å—Å–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã)\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {amount} LTC\n\n‚ùó–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.üëá", reply_markup=kb.user_agreement)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ LTC –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=kb.cancel_kb)
        await state.update_data(amount=amount, cost=cost, currency="LTC")
        await state.set_state(CryptoBuy.wallet)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞
@router.message(CryptoBuy.wallet)
async def process_wallet(message: Message, state: FSMContext):
    wallet = message.text.strip()

    if wallet == cancel_text:
        await state.clear()
        await start(message, state)
        return
    elif re.search(r'[^\x00-\x7F]', wallet):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!")
        return

    await state.update_data(wallet=wallet)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.\n\n–ï—Å–ª–∏ —É –í–∞—Å –µ–≥–æ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb.no_promocode_kb)
    await state.set_state(CryptoBuy.waiting_for_code)

@router.message(CryptoBuy.waiting_for_code)
async def procces_promocode(message: Message, state: FSMContext):
    promocode = message.text.strip()

    if promocode == 'üéü –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞.':
        await state.set_state(CryptoBuy.payment_method)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=kb.payment_kb)
        return
    else:
        data = check_promocode(promocode)
        if data[0]:
            await message.answer(data[1])
            await state.update_data(discount=data[2])
            await state.update_data(promocode=promocode)
            await state.set_state(CryptoBuy.payment_method)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=kb.payment_kb)
            return
        else:
            await message.answer(data[1], reply_markup=kb.no_promocode_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@router.message(CryptoBuy.payment_method, F.text.in_([f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –°–ù–ì ({kb.commission_card}%)", f"üè¶ –û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü ({kb.commission_sbp}%)"]))
async def process_payment_method(message: Message, state: FSMContext, bot):
    payment_method = message.text
    await state.update_data(payment_method=payment_method)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    amount = data.get("amount")
    cost = data.get("cost")
    currency = data.get("currency")
    wallet = data.get("wallet")
    payment_method = data.get("payment_method")
    promocode = data.get("promocode") or None
    discount = data.get("discount") or None

    data = kb.which_payment_method(amount, currency, cost, wallet, payment_method, promocode, discount, get_requisite()) # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–Ω–æ–ø–æ–∫ –∏ ID –∑–∞–∫–∞–∑–∞
    await message.answer(f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω: {payment_method}', reply_markup=ReplyKeyboardRemove())
    await message.answer(text=data[0], reply_markup=data[1] or None, parse_mode='HTML')
    await state.clear()
    await state.set_state(CryptoBuy.waiting_for_payment)

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ 15 –º–∏–Ω—É—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    task = asyncio.create_task(payment_timer(message, state, bot, data[2]))
    active_deals[message.chat.id] = task

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–∞–º
    for admin_id in admins:
        try:
            await message.bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.chat.username or message.chat.id} —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑!\n<code>{amount:.8f}</code> {currency}\n<code>{data[3]:.2f}</code> —Ä—É–±–ª–µ–π.\n–ü—Ä–æ–º–æ–∫–æ–¥: {promocode if promocode else '–ù–µ—Ç'} –Ω–∞ —Å–∫–∏–¥–∫—É {discount if discount else 0}%\n–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: <code>{wallet}</code>\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n\n<i>ID –∑–∞–∫–∞–∑–∞: <code>{data[2]}</code></i>', parse_mode='HTML', reply_markup=kb.get_complete_btn(message))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(CryptoBuy.waiting_for_amount_btc, CryptoBuy.waiting_for_amount_usdt, CryptoBuy.waiting_for_amount_ltc)
async def reject_anything_else(message: Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞–º
@router.message(CryptoBuy.waiting_for_screenshot)
async def process_screenshot(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id

    await message.answer("–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üßæ")
    await state.clear()

    # –†–∞—Å—Å—ã–ª–∫–∞ —á–µ–∫–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_id in admins:
        try:
            await message.bot.send_photo(admin_id, photo=photo_id, caption=f'–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.chat.username or message.chat.id}')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setcard –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@router.message(Command('setcard'))
async def set_card(message: Message, state: FSMContext):
    for admin_id in admins:
        if message.chat.id == admin_id:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", reply_markup=kb.cancel_kb)
            await state.set_state(CryptoBuy.waiting_for_requisite)
        else:
            await message.answer(f"üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º
@router.message(CryptoBuy.waiting_for_requisite)
async def new_requisite(message: Message, state: FSMContext):
    requisite = message.text.replace(" ", "")
    if requisite.isdigit(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —á–∏—Å–ª–æ–º
        await state.clear()
        with open(requisite_path, "w", encoding="utf-8") as f:
            json.dump({"payment_method": requisite}, f, ensure_ascii=False)
        await message.answer(f"‚úÖ –ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n{get_requisite()}")
        await start(message, state)
    elif message.text == cancel_text: # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        await message.answer(f"üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        await state.clear()
        await start(message, state)
    else: # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newpromo
@router.message(Command('newpromo'))
async def new_promocode(message: Message, state: FSMContext):
    for admin_id in admins:
        if message.chat.id == admin_id:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=kb.cancel_kb)
            await state.set_state(CryptoBuy.waiting_for_new_promocode)
        else:
            await message.answer(f"üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

@router.message(CryptoBuy.waiting_for_new_promocode)
async def procces_new_promocode(message: Message, state: FSMContext):
    promocode = message.text
    if promocode != cancel_text:
        await state.update_data(promocode=promocode)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ % —Å–∫–∏–¥–∫–∏', reply_markup=kb.cancel_kb)
        await state.set_state(CryptoBuy.waiting_for_discount)
    else:
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()
        await start(message, state)

@router.message(CryptoBuy.waiting_for_discount)
async def get_discount(message: Message, state: FSMContext):
    discount = int(message.text)
    await state.update_data(discount=discount)
    await state.set_state(CryptoBuy.waiting_for_new_promocode)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', reply_markup=kb.cancel_kb)
    await state.set_state(CryptoBuy.waiting_for_num_of_activations)

@router.message(CryptoBuy.waiting_for_num_of_activations)
async def add_promocode(message: Message, state: FSMContext):
    num = int(message.text)
    promocode = await state.get_data()
    save_promocode(promocode["promocode"], num, promocode["discount"])
    await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥: <code>{promocode["promocode"]}</code>\n–°–∫–∏–¥–∫–∞: {promocode["discount"]}%\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {num}\n\n<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n<i>–ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω –Ω–µ –±—ã–ª –¥–æ–∞–±–≤–ª–µ–Ω</i>', parse_mode='HTML')
    await state.clear()
    await start(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.message(F.text == cancel_text)
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await start(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫"
@router.callback_query(F.data == "send_screenshot", CryptoBuy.waiting_for_payment)
async def ask_for_screenshot(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:")
    await state.set_state(CryptoBuy.waiting_for_screenshot)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
@router.callback_query()
async def callback_check(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split(':')
    if data[0] == 'cancel':
        if await state.get_state() == CryptoBuy.waiting_for_payment or await state.get_state() == CryptoBuy.waiting_for_screenshot:
            await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await callback.message.answer('‚ùå –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!')
            await state.clear()
            active_deals.pop(callback.message.chat.id, None)
            await start(callback.message, state)
        else:
            await callback.message.answer('‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω!')
            await state.clear()
            await start(callback.message, state)
            return

        for admin_id in admins:
            try:
                await callback.bot.send_message(admin_id, f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.message.chat.username or callback.message.chat.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑!\n\nID –∑–∞–∫–∞–∑–∞: {data[1]}', parse_mode='HTML')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    elif data[0] == 'cancel_deal':
        try:
            user_id = data[1]
            username = data[2]
            task = active_deals.get(int(user_id))

            if task:
                task.cancel()
                active_deals.pop(user_id, None)
                await callback.message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                await callback.bot.send_message(user_id, '‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É!</b>\n\nüíµ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ—à–µ–ª—ë–∫', parse_mode='HTML')
                await state.clear()
                await start(callback.message, state)
            else:
                await callback.message.answer("‚ùó –°–¥–µ–ª–∫–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
                await state.clear()
                await start(callback.message, state)
        except Exception:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É —Ç–∞–π–º–µ—Ä–∞ –≤ 15 –º–∏–Ω—É—Ç
async def payment_timer(message: Message, state: FSMContext, bot, pay_id):
    await asyncio.sleep(900)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
    async def message_for_admins():
        for admin_id in admins:
            try:
                await bot.send_message(admin_id, f'‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.chat.username or message.chat.id} –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É.\n\n–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n<i>ID –∑–∞–∫–∞–∑–∞:</i> <code>{pay_id}</code>', parse_mode='HTML')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    if await state.get_state() == CryptoBuy.waiting_for_payment: # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å–ø–µ–ª –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.
        await bot.send_message(message.chat.id, f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ.\n\n<b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n<i>ID –∑–∞–∫–∞–∑–∞:</i> <code>{pay_id}</code>", parse_mode='HTML')
        await state.clear()
        await message_for_admins()
    elif await state.get_state() == CryptoBuy.waiting_for_screenshot: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞, –¥–∞—ë–º –µ–º—É –µ—â–µ –≤—Ä–µ–º—è.
        await asyncio.sleep(120)
        await bot.send_message(message.chat.id, f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ.\n\n<b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n<i>ID –∑–∞–∫–∞–∑–∞:</i> <code>{pay_id}</code>", parse_mode='HTML')
        await state.clear()
        await message_for_admins()

    active_deals.pop(message.chat.id, None)